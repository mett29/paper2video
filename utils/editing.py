import os
from typing import List
import tempfile
import re

from PIL import Image
import pypdfium2 as pdfium
from pylatex import Document, Command
from pylatex.utils import NoEscape
from pylatex.base_classes import Environment, Options
from moviepy.editor import ImageClip, AudioFileClip, concatenate_videoclips

from config.config import OUTPUT_DIRPATH
from utils.tts import text_to_mp3


def escape_latex_special_chars(text: str) -> str:
    """
    Escape LaTeX special characters in the given text.
    """
    # Define the regex pattern and the corresponding replacement
    special_chars = {
        r'\\': r'\\textbackslash{}',  # Must escape backslashes first
        r'&': r'\&',
        r'%': r'\%',
        r'\$': r'\$',
        r'#': r'\#',
        r'_': r'\_',
        r'{': r'\{',
        r'}': r'\}',
        r'~': r'\textasciitilde{}',  # Use \textasciitilde for tilde (~)
        r'\^': r'\textasciicircum{}',  # Use \textasciicircum for caret (^)
    }

    # Escape each special character in the text
    for char, replacement in special_chars.items():
        text = re.sub(char, replacement, text)

    return text


# Custom class to create Beamer frame environment with title
class Frame(Environment):
    _latex_name = 'frame'
    packages = [Command('usepackage', 'beamerthemeshadow')]


def create_beamer(slides_content: List[dict]) -> str:
    """
    Generate beamer presentation as PDF.

    Returns path of the generated PDF.
    """
    # Create a LaTeX document
    doc = Document(documentclass=Command('documentclass', options=Options('aspectratio=169'), arguments=['beamer']))

    # Create frames for each slide title and content
    for content in slides_content:
        with doc.create(Frame()):
            doc.append(NoEscape(r'\frametitle{' + content.get('slide_title', '') + '}'))
            # Replace \n with \newline for safe line breaks
            formatted_content = content.get('slide_content', '').replace('\n', r'\newline ')
            escaped_content = escape_latex_special_chars(formatted_content)
            doc.append(NoEscape(escaped_content))

    # Generate the PDF
    output_path = os.path.join(OUTPUT_DIRPATH, 'beamer_presentation.pdf')
    doc.generate_pdf(output_path, clean_tex=True)
    return output_path


def pdf_to_img(pdf_path: str) -> List[Image.Image]:
    """
    Convert PDF to list of Pillow Images.
    """
    pdf = pdfium.PdfDocument(pdf_path)
    n_pages = len(pdf)
    pil_images = []
    for page_number in range(n_pages):
        page = pdf.get_page(page_number)
        bitmap = page.render(
            scale=1,    # 72dpi resolution
            rotation=0  # no additional rotation
        )
        pil_images.append(bitmap.to_pil())
    return pil_images


def convert_to_video(slides_content: List[dict], presentation_path: str) -> None:
    """
    Convert beamer presentation (PDF) to MP4 video.

    Narration generated by the LLM is converted to audio (MP3)
    and added for each slide.
    """
    with tempfile.TemporaryDirectory() as temp_path:
        clips = []
        # Convert beamer presentation to set of images
        images_from_path = pdf_to_img(pdf_path=presentation_path)
        for i, (slide, image) in enumerate(zip(slides_content, images_from_path)):
            print(f"Processing slide {i} ...")
            slide_narration = slide.get('slide_narration', '')
            image_path = os.path.join(temp_path, f"frame_{i}.jpg")
            audio_path = os.path.join(temp_path, f"frame_{i}.mp3")
            # image = image.resize((2000, 1500), Image.Resampling.LANCZOS)
            image.save(image_path)
            # Convert text (narration) to mp3
            text_to_mp3(slide_narration, audio_path)
            audio_clip = AudioFileClip(audio_path)
            slide_clip = ImageClip(image_path).set_duration(audio_clip.duration)
            slide_clip = slide_clip.set_audio(audio_clip)
            clips.append(slide_clip)

        # Export video
        final_clip = concatenate_videoclips(clips)
        final_clip.write_videofile(
            filename=os.path.join(OUTPUT_DIRPATH, 'final_video.mp4'),
            fps=24
        )
